// <auto-generated />
using System;
using Constack.Widemapp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Constack.Widemapp.Persistence.Migrations
{
    [DbContext(typeof(AutomationDbContext))]
    [Migration("20220919191135_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Api", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Endpoint");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EntityId");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GroupName");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MethodId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("MethodId");

                    b.ToTable("Apis", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.ApiRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<Guid>("ApiId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ApiId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<bool?>("IsNullable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsNullable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.ToTable("ApiRequests", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.ApiResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<Guid>("ApiId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ApiId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<bool?>("IsNullable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsNullable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.ToTable("ApiResponses", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("MicroserviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MicroserviceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MicroserviceId");

                    b.ToTable("Entities", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.EntityProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EntityId");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PropertyId");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("EntityProperties", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.EntityRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("EntityFromId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EntityFromId");

                    b.Property<Guid>("EntityToId")
                        .HasColumnType("char(36)")
                        .HasColumnName("EntityToId");

                    b.Property<Guid>("PropertyFromId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PropertyFromId");

                    b.Property<Guid>("PropertyToId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PropertyToId");

                    b.Property<Guid>("RelationTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("RelationTypeId");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("EntityToId");

                    b.HasIndex("PropertyToId");

                    b.HasIndex("RelationTypeId");

                    b.ToTable("EntityRelations", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Action");

                    b.Property<string>("ContentAdd")
                        .HasColumnType("longtext")
                        .HasColumnName("ContentAdd");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Path");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Placeholder");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TemplateId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.FileEdit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("FileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("FileId");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Placeholder");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("FileEdits", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.GenerationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("GenerationTypes", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("GenerationTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GenerationTypeId");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GroupId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TemplateId");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("GenerationTypeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Method", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Methods", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Microservice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ProjectId");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Microservices", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("MainEntityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MainEntityId");

                    b.Property<Guid?>("MicroserviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MicroserviceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TemplateId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MainEntityId");

                    b.HasIndex("MicroserviceId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PlanApi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<Guid?>("ApiId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ApiId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PlanId");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid?>("WebComponentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("WebComponentId");

                    b.HasKey("Id");

                    b.HasIndex("ApiId");

                    b.HasIndex("PlanId");

                    b.HasIndex("WebComponentId");

                    b.ToTable("PlanApis", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PlanGenerationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("GenerationTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GenerationTypeId");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PlanId");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("GenerationTypeId");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanGenerationTypes", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PlanGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("GroupName");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PlanId");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanGroups", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<bool>("IsNullable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsNullable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<Guid>("PropertyTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("PropertyTypeId");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PropertyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.RelationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("RelationTypes", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("MicroserviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("MicroserviceId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MicroserviceId");

                    b.ToTable("Templates", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("RoleId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Discriminator")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.WebComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("ID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Menu")
                        .HasColumnType("longtext")
                        .HasColumnName("Menu");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name");

                    b.Property<string>("Path")
                        .HasColumnType("longtext")
                        .HasColumnName("Path");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TemplateId");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("WebComponents", (string)null);
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Api", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Entity", "Entity")
                        .WithMany("Apis")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Method", "Method")
                        .WithMany("Apis")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.ApiRequest", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Api", "Api")
                        .WithMany("ApiRequests")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Api");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.ApiResponse", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Api", "Api")
                        .WithMany("ApiResponses")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Api");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Entity", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Microservice", "Microservice")
                        .WithMany("Entities")
                        .HasForeignKey("MicroserviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Microservice");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.EntityProperty", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Entity", "Entity")
                        .WithMany("EntityProperties")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Property", "Property")
                        .WithMany("EntityProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.EntityRelation", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Entity", "Entity")
                        .WithMany("EntityRelations")
                        .HasForeignKey("EntityToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Property", "Property")
                        .WithMany("EntityRelations")
                        .HasForeignKey("PropertyToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.RelationType", "RelationType")
                        .WithMany("EntityRelations")
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Property");

                    b.Navigation("RelationType");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.File", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Group", "Group")
                        .WithMany("Files")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Template", "Template")
                        .WithMany("Files")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.FileEdit", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.File", "File")
                        .WithMany("FileEdits")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Group", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.GenerationType", "GenerationType")
                        .WithMany("Groups")
                        .HasForeignKey("GenerationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Group", "GroupOwn")
                        .WithMany("Groups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Template", "Template")
                        .WithMany("Groups")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenerationType");

                    b.Navigation("GroupOwn");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Microservice", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Project", "Project")
                        .WithMany("Microservices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Plan", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Entity", "Entity")
                        .WithMany("Plans")
                        .HasForeignKey("MainEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Microservice", "Microservice")
                        .WithMany("Plans")
                        .HasForeignKey("MicroserviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Template", "Template")
                        .WithMany("Plans")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("Microservice");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PlanApi", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Api", "Api")
                        .WithMany("PlanApis")
                        .HasForeignKey("ApiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Plan", "Plan")
                        .WithMany("PlanApis")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.WebComponent", "WebComponent")
                        .WithMany("PlanApis")
                        .HasForeignKey("WebComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Api");

                    b.Navigation("Plan");

                    b.Navigation("WebComponent");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PlanGenerationType", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.GenerationType", "GenerationType")
                        .WithMany("PlanGenerationTypes")
                        .HasForeignKey("GenerationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.Plan", "Plan")
                        .WithMany("PlanGenerationTypes")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenerationType");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PlanGroup", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Plan", "Plan")
                        .WithMany("PlanGroups")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Project", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Property", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.RoleClaim", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Template", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Microservice", "Microservice")
                        .WithMany("Templates")
                        .HasForeignKey("MicroserviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Microservice");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserClaim", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserLogin", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Constack.Widemapp.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.UserToken", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.WebComponent", b =>
                {
                    b.HasOne("Constack.Widemapp.Domain.Entities.Template", "Template")
                        .WithMany("WebComponents")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Api", b =>
                {
                    b.Navigation("ApiRequests");

                    b.Navigation("ApiResponses");

                    b.Navigation("PlanApis");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Entity", b =>
                {
                    b.Navigation("Apis");

                    b.Navigation("EntityProperties");

                    b.Navigation("EntityRelations");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.File", b =>
                {
                    b.Navigation("FileEdits");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.GenerationType", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("PlanGenerationTypes");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Group", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Method", b =>
                {
                    b.Navigation("Apis");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Microservice", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("Plans");

                    b.Navigation("Templates");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Plan", b =>
                {
                    b.Navigation("PlanApis");

                    b.Navigation("PlanGenerationTypes");

                    b.Navigation("PlanGroups");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Project", b =>
                {
                    b.Navigation("Microservices");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Property", b =>
                {
                    b.Navigation("EntityProperties");

                    b.Navigation("EntityRelations");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.RelationType", b =>
                {
                    b.Navigation("EntityRelations");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.Template", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Groups");

                    b.Navigation("Plans");

                    b.Navigation("WebComponents");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Constack.Widemapp.Domain.Entities.WebComponent", b =>
                {
                    b.Navigation("PlanApis");
                });
#pragma warning restore 612, 618
        }
    }
}
